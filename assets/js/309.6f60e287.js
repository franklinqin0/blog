(window.webpackJsonp=window.webpackJsonp||[]).push([[309],{744:function(t,e,a){"use strict";a.r(e);var s=a(2),i=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Some technical questions and answers.")]),t._v(" "),e("h2",{attrs:{id:"concurrency-and-parallelism"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrency-and-parallelism"}},[t._v("#")]),t._v(" Concurrency and Parallelism")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Parallel programming")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Execute programs faster on parallel hardware")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Concurrent programming")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Manage concurrent execution threads explicitly")])])])]),t._v(" "),e("p",[t._v("non-determinism = parallel processing + mutable state")]),t._v(" "),e("p",[t._v("to avoid mutable state, use functional programming!")]),t._v(" "),e("h2",{attrs:{id:"literals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[t._v("#")]),t._v(" Literals")]),t._v(" "),e("p",[t._v("a notation for representing a "),e("strong",[t._v("fixed value in source code")]),t._v(". Almost all programming languages have notations for atomic values such as "),e("em",[t._v("integers")]),t._v(", "),e("em",[t._v("floating-point numbers")]),t._v(", and "),e("em",[t._v("strings")]),t._v(", and usually for "),e("em",[t._v("booleans")]),t._v(" and "),e("em",[t._v("characters")]),t._v("; some also have notations for elements of enumerated types and compound values such as "),e("em",[t._v("arrays")]),t._v(", "),e("em",[t._v("records")]),t._v(", and "),e("em",[t._v("objects")]),t._v(". An "),e("em",[t._v("anonymous function")]),t._v(" is a literal for the "),e("em",[t._v("function type")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"macro-vs-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#macro-vs-function"}},[t._v("#")]),t._v(" Macro vs. Function")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("\\")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Macro")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Function")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Compilation")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("preprocessed function")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("compiled")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Type Checking")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Code Length")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("increases")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("unaffected")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Side Effects")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("can happen at later stages")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("none in any case")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Speed of Execution")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("faster")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Slower")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Name replaced by Value")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("before compilation")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("during function call")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Useful?")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("when small code is repeated many times")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("when large code is to be written")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Checks Compile-Time Errors")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])])])]),t._v(" "),e("p",[t._v("https://www.quickprogrammingtips.com/mongodb/mongodb-history.html")]),t._v(" "),e("h2",{attrs:{id:"discriminative-vs-generative-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#discriminative-vs-generative-model"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://stackoverflow.com/a/879591/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discriminative vs. Generative Model"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("A discriminative model learns the conditional probability distribution "),e("code",[t._v("p(y | x)")]),t._v(", which is the natural distribution for classifying a given example "),e("code",[t._v("x")]),t._v(" into a class "),e("code",[t._v("y")]),t._v(". A generative model learns the joint probability distribution "),e("code",[t._v("p(x, y)")]),t._v(", which could be used to generate likely "),e("code",[t._v("(x, y)")]),t._v(" pairs.")]),t._v(" "),e("h2",{attrs:{id:"difference-between-fit-and-fit-transform-in-scikit-learn-models"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#difference-between-fit-and-fit-transform-in-scikit-learn-models"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://datascience.stackexchange.com/a/12346",target:"_blank",rel:"noopener noreferrer"}},[t._v("difference between fit and fit_transform in scikit-learn models"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("#very sklearn's transform's "),e("code",[t._v("fit()")]),t._v(" just calculates the parameters and saves them as an internal object's state. Afterwards, you can call its "),e("code",[t._v("transform()")]),t._v(" method to apply the transformation to any particular set of examples.")]),t._v(" "),e("p",[e("code",[t._v("fit_transform()")]),t._v(" joins these two steps and is used for the initial fitting of parameters on the training set "),e("eq",[e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[e("semantics",[e("mrow",[e("mi",[t._v("x")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("x")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),e("span",{staticClass:"mord mathdefault"},[t._v("x")])])])])]),t._v(", while also returning the transformed "),e("eq",[e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[e("semantics",[e("mrow",[e("msup",[e("mi",[t._v("x")]),e("mo",{attrs:{mathvariant:"normal",lspace:"0em",rspace:"0em"}},[t._v("′")])],1)],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("x'")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.751892em","vertical-align":"0em"}}),e("span",{staticClass:"mord"},[e("span",{staticClass:"mord mathdefault"},[t._v("x")]),e("span",{staticClass:"msupsub"},[e("span",{staticClass:"vlist-t"},[e("span",{staticClass:"vlist-r"},[e("span",{staticClass:"vlist",staticStyle:{height:"0.751892em"}},[e("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[e("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),e("span",{staticClass:"sizing reset-size6 size3 mtight"},[e("span",{staticClass:"mord mtight"},[e("span",{staticClass:"mord mtight"},[t._v("′")])])])])])])])])])])])])]),t._v(". Internally, the transformer object just calls first "),e("code",[t._v("fit()")]),t._v(" and then "),e("code",[t._v("transform()")]),t._v(" on the same data.")],1)])}),[],!1,null,null,null);e.default=i.exports}}]);