(window.webpackJsonp=window.webpackJsonp||[]).push([[253],{669:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("While studying for interview problems, I use "),a("code",[t._v("Python3")]),t._v(" as the PL and feel like concluding its commonly used features.")]),t._v(" "),a("h2",{attrs:{id:"why-python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-python"}},[t._v("#")]),t._v(" Why Python")]),t._v(" "),a("ul",[a("li",[t._v("elegant and clear")]),t._v(" "),a("li",[t._v("high-readability")])]),t._v(" "),a("h2",{attrs:{id:"style-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#style-guide"}},[t._v("#")]),t._v(" Style Guide")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://google.github.io/styleguide/pyguide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Python Style Guide"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"pyenv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pyenv"}},[t._v("#")]),t._v(" Pyenv")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://realpython.com/intro-to-pyenv",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intro to Pyenv"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"scopes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scopes"}},[t._v("#")]),t._v(" Scopes")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://realpython.com/python-scope-legb-rule",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python scopes"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"local-global-nonlocal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#local-global-nonlocal"}},[t._v("#")]),t._v(" Local, Global, Nonlocal")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.programiz.com/python-programming/global-local-nonlocal-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python Local and Global Variables\n"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"for-while-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-while-loops"}},[t._v("#")]),t._v(" For, While Loops")]),t._v(" "),a("h3",{attrs:{id:"do-while-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#do-while-loop"}},[t._v("#")]),t._v(" Do-While Loop")]),t._v(" "),a("p",[t._v("As Python does not have a do-while loop, here are "),a("a",{attrs:{href:"https://stackoverflow.com/a/743186",target:"_blank",rel:"noopener noreferrer"}},[t._v("some workarounds"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" Int")]),t._v(" "),a("p",[t._v("The # bits of number "),a("code",[t._v("n")]),t._v(" is "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("log")]),a("mo",[t._v("⁡")]),a("mi",[t._v("n")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\log n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(".")],1),t._v(" "),a("h2",{attrs:{id:"modular-arithmatic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modular-arithmatic"}},[t._v("#")]),t._v(" Modular Arithmatic")]),t._v(" "),a("p",[a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mo",[t._v("+")]),a("mi",[t._v("m")]),a("msup",[a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mi",[t._v("k")])],1),a("mspace"),a("mspace",{attrs:{width:"0.6666666666666666em"}}),a("mrow",[a("mi",{attrs:{mathvariant:"normal"}},[t._v("m")]),a("mi",{attrs:{mathvariant:"normal"}},[t._v("o")]),a("mi",{attrs:{mathvariant:"normal"}},[t._v("d")])],1),a("mtext"),a("mtext"),a("mi",[t._v("n")]),a("mo",[t._v("=")]),a("mi",[t._v("m")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(n+m)^k \\mod n = m")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1.099108em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathdefault"},[t._v("m")]),a("span",{staticClass:"mclose"},[a("span",{staticClass:"mclose"},[t._v(")")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.849108em"}},[a("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathdefault mtight",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])])])])])]),a("span",{staticClass:"mspace allowbreak"},[t._v(" ")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.6666666666666666em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("m")]),a("span",{staticClass:"mord mathrm"},[t._v("o")]),a("span",{staticClass:"mord mathrm"},[t._v("d")])])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),a("span",{staticClass:"mrel"},[t._v("=")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),a("span",{staticClass:"mord mathdefault"},[t._v("m")])])])])])],1),t._v(" "),a("h3",{attrs:{id:"bit-manipulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bit-manipulation"}},[t._v("#")]),t._v(" Bit Manipulation")]),t._v(" "),a("p",[a("code",[t._v("n & (n-1)")]),t._v(" would eliminate the rightmost 1-bit.")]),t._v(" "),a("h3",{attrs:{id:"overflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overflow"}},[t._v("#")]),t._v(" Overflow")]),t._v(" "),a("p",[t._v("Basically, Python doesn't need to worry about integer overflow.")]),t._v(" "),a("p",[t._v("Following are from "),a("a",{attrs:{href:"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949",target:"_blank",rel:"noopener noreferrer"}},[a("em",[t._v("EPI in Python")]),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Integers:")]),t._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"}),a("p",[t._v("Integers in Python3 are "),a("strong",[t._v("unbounded")]),t._v("-the "),a("em",[t._v("maximum integer")]),t._v(" representable is "),a("em",[t._v("a function of the available memory")]),t._v(". The constant "),a("code",[t._v("sys.maxsize")]),t._v(" can be used to find the word-size; specifically, it's the maximum value integer that can be stored in the word, e.g., "),a("eq",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mn",[t._v("2")]),a("mo",[t._v("∗")]),a("mo",[t._v("∗")]),a("mn",[t._v("63")]),a("mo",[t._v("−")]),a("mi",[t._v("L")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2**63 - L")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[t._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),a("span",{staticClass:"mord"},[t._v("∗")]),a("span",{staticClass:"mord"},[t._v("6")]),a("span",{staticClass:"mord"},[t._v("3")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[t._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"mord mathdefault"},[t._v("L")])])])])]),t._v(" on a "),a("code",[t._v("64")]),t._v("-bit machine. Bounds on floats are specified in "),a("code",[t._v("sys.float-info")]),t._v(".")],1)]),a("p",[t._v("Float:")]),t._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"}),a("p",[t._v("Unlike integers, floats are not infinite precision, and it's convenient to refer to infinity as "),a("code",[t._v("float('inf ')")]),t._v(" and "),a("code",[t._v("float('-inf ')")]),t._v(". These values are comparable to integers, and can be used to create pseudo max-int and pseudo min-int.")])]),a("h3",{attrs:{id:"bin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bin"}},[t._v("#")]),t._v(" bin")]),t._v(" "),a("p",[t._v("From "),a("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/library/functions.html#bin")]),t._v(":")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("bin")]),a("p",[a("code",[t._v("bin")]),t._v(" converts an integer number to a binary string prefixed with “0b”. "),a("code",[t._v("[2:]")]),t._v(" takes away "),a("code",[t._v("0b")]),t._v(" and returns the binary int as a string.")])]),a("p",[t._v("If "),a("code",[t._v("n")]),t._v(" is an integer, "),a("code",[t._v("int(bin(n)[2:],2)")]),t._v(" would return the original "),a("code",[t._v("n")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"division"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#division"}},[t._v("#")]),t._v(" Division")]),t._v(" "),a("p",[a("code",[t._v("divmod")])]),t._v(" "),a("h3",{attrs:{id:"division-operators-and"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#division-operators-and"}},[t._v("#")]),t._v(" Division Operators "),a("code",[t._v("/")]),t._v(" and "),a("code",[t._v("//")])]),t._v(" "),a("p",[t._v("The division operators difference in Python 2 and 3 is described "),a("a",{attrs:{href:"https://www.geeksforgeeks.org/division-operator-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Python 2 uses "),a("code",[t._v("/")]),t._v(" for "),a("strong",[t._v("floor division")]),t._v(" if "),a("em",[t._v("both arguments")]),t._v("(the dividend and divisor) are "),a("em",[t._v("integers")]),t._v(".")]),t._v(" "),a("p",[t._v("Python 2 uses "),a("code",[t._v("//")]),t._v(" for "),a("strong",[t._v("floor division")]),t._v(" for "),a("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),a("p",[t._v("Python 3 uses "),a("code",[t._v("/")]),t._v(" for "),a("strong",[t._v("floating point division")]),t._v(" for "),a("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),a("p",[t._v("Python 3 uses "),a("code",[t._v("//")]),t._v(" for "),a("strong",[t._v("floor division")]),t._v(" for "),a("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),a("p",[t._v("So the behavior of “//” is same for Python 2 and 3.")]),t._v(" "),a("p",[t._v("Personally I like Python 3 for division behavior as it's clearer and causes less confusion.")]),t._v(" "),a("h2",{attrs:{id:"data-structures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}},[t._v("#")]),t._v(" Data Structures")]),t._v(" "),a("p",[t._v("Sometimes it's not so obvious to see how to use a data structure in "),a("code",[t._v("Python3")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"string-immutable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-immutable"}},[t._v("#")]),t._v(" String (Immutable)")]),t._v(" "),a("p",[t._v("'' or \"\"")]),t._v(" "),a("h4",{attrs:{id:"f-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#f-string"}},[t._v("#")]),t._v(" f-string")]),t._v(" "),a("p",[t._v("From "),a("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/reference/lexical_analysis.html#f-strings")]),t._v(":")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("f-strings")]),a("p",[t._v("For example: "),a("code",[t._v("f'{6:08b}'")]),t._v(".")]),t._v(" "),a("p",[t._v("Starting with "),a("code",[t._v("f")]),t._v(", represent int "),a("code",[t._v("6")]),t._v(" in "),a("code",[t._v("8")]),t._v(" "),a("code",[t._v("b")]),t._v("inary digits with "),a("code",[t._v("0")]),t._v("'s padded at front. So the evaluated result is: "),a("code",[t._v("'00000110'")]),t._v(".")]),t._v(" "),a("p",[t._v("Equivalently, could do "),a("code",[t._v("bin(6)[2:].zfill(8)")]),t._v(", where "),a("code",[t._v("zfill")]),t._v(" added the "),a("code",[t._v("0")]),t._v("'s padded at front.")])]),a("h3",{attrs:{id:"hashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("hashset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nhashset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OR")]),t._v("\nhashset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),a("p",[t._v("{}\n"),a("code",[t._v("get(self, key, default=None)")]),t._v(" returns the value for key if key is in the dictionary, else default.")]),t._v(" "),a("p",[t._v("Dictionary associates values with immutable keys which means you cannot use lists as keys.")]),t._v(" "),a("h3",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),a("p",[t._v("[]")]),t._v(" "),a("h3",{attrs:{id:"matrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matrix"}},[t._v("#")]),t._v(" Matrix")]),t._v(" "),a("p",[a("code",[t._v("[0]*2")]),t._v(" "),a("code",[t._v("[[0 for j in range(num_cols)] for i in range(num_rows)]")]),t._v("\nSince "),a("code",[t._v("i")]),t._v(" and "),a("code",[t._v("j")]),t._v(" are not used, can simplify the above to:\n"),a("code",[t._v("[[0 for _ in range(num_cols)] for _ in range(num_rows)]")])]),t._v(" "),a("h3",{attrs:{id:"stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),a("p",[t._v("[]\n"),a("code",[t._v("from collections import deque")]),t._v(" and initialize a stack as "),a("code",[t._v("deque()")])]),t._v(" "),a("h3",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("p",[t._v("More at "),a("a",{attrs:{href:"https://www.geeksforgeeks.org/queue-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Queue in Python"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"linked-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[t._v("#")]),t._v(" Linked List")]),t._v(" "),a("p",[t._v("[]")]),t._v(" "),a("h4",{attrs:{id:"reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[t._v("#")]),t._v(" Reverse")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    last "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# keep the next node")]),t._v("\n        tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# reverse the link")]),t._v("\n        head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" last\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# update the last node and the current node")]),t._v("\n        last "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n        head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h3",{attrs:{id:"shallow-flatten"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shallow-flatten"}},[t._v("#")]),t._v(" Shallow Flatten")]),t._v(" "),a("p",[t._v("We could have nested for loops")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" sublist "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" list_of_lists "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sublist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Or use "),a("code",[t._v("reduce")]),t._v(" from "),a("code",[t._v("functools")])]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" functools "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" list_of_lists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("Or use "),a("code",[t._v("chain")]),t._v(" from "),a("code",[t._v("itertools")])]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" itertools "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chain\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list_of_lists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("There may be many other possible ways.")]),t._v(" "),a("h3",{attrs:{id:"tuple-immutable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tuple-immutable"}},[t._v("#")]),t._v(" Tuple (Immutable)")]),t._v(" "),a("p",[t._v("()")]),t._v(" "),a("h3",{attrs:{id:"list-cannot-be-hashed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-cannot-be-hashed"}},[t._v("#")]),t._v(" List Cannot be Hashed")]),t._v(" "),a("p",[t._v('A list adding to a set would cause error "list objects are unhashable" b/c '),a("strong",[t._v("list is mutable")]),t._v(" but elements in set are not supposed to change after being added and hashed. Instead of "),a("code",[t._v("list")]),t._v(", I could add a "),a("code",[t._v("tuple")]),t._v(" to the set, as described in "),a("a",{attrs:{href:"https://stackoverflow.com/a/1306653/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("this Stack Overflow answer"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"defaultdict-of-defaultdict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defaultdict-of-defaultdict"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://stackoverflow.com/a/5029958/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("defaultdict of defaultdict"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("defaultdict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" defaultdict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("The argument of a defaultdict (in this case is lambda: defaultdict(int)) will be called when you try to access a key that doesn't exist. The return value of it will be set as the new value of this key, which means in our case the value of d[Key_doesnt_exist] will be defaultdict(int).")]),t._v(" "),a("p",[t._v("If you try to access a key from this last defaultdict i.e. d[Key_doesnt_exist][key_doesnt_exist] it will return 0, which is the return value of the argument of the last defaultdict i.e. int().")]),t._v(" "),a("p",[t._v("To iterate:")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" courses "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" schedulesByPECourses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    pe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" courses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        pe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"heap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heap"}},[t._v("#")]),t._v(" Heap")]),t._v(" "),a("p",[t._v("Python implements heap in its internal library "),a("code",[t._v("heapq")]),t._v(". See more at "),a("a",{attrs:{href:"https://docs.python.org/3/library/heapq.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("doc"),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://www.geeksforgeeks.org/heap-queue-or-heapq-in-python",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"algorithms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithms"}},[t._v("#")]),t._v(" Algorithms")]),t._v(" "),a("p",[t._v("Prefix Sum can look for subarray sum O(1) every time\n前缀和：多次查询区间和 O(1)/次")]),t._v(" "),a("ul",[a("li",[t._v("前缀和是⼀种思想，可以⽤于许多的减少时间复杂度的地⽅")]),t._v(" "),a("li",[t._v("我们不⼀定会使⽤前缀“和”，可能是其他⽐如积，最⼤值，最⼩值这样 的值。主要还是要根据题⽬来考虑使⽤什么。")]),t._v(" "),a("li",[t._v("哈希表是⼀种⼯具，与前缀和配套使⽤可以达到“⽤空间换时间”的⽬ 的。")])]),t._v(" "),a("p",[t._v("双指针：根据区间和调整区间\n树状数组：单点修改，区间查询\n线状树：区间修改")]),t._v(" "),a("p",[t._v("Two Pointers is used interchangbly w/ sliding window, as the way of thinking is more important than name and style.")]),t._v(" "),a("p",[t._v("95% of the time, summing over a window requires prefix sum. Exceptions: 线状树, 互动数组")]),t._v(" "),a("p",[t._v("Edge cases to watch for:")]),t._v(" "),a("ol",[a("li",[t._v("0, empty input of string/array/any ds")]),t._v(" "),a("li",[t._v("TLE / infinite loop")])]),t._v(" "),a("p",[a("code",[t._v("csum")]),t._v(" means cumulative sum.")]),t._v(" "),a("p",[t._v("隐式图：没有明确的点和边的关系（不会定义 Node 等）")]),t._v(" "),a("p",[t._v("矩阵就是⼀种经典的隐式图问题")]),t._v(" "),a("p",[t._v("Graph Algorithms:")]),t._v(" "),a("p",[t._v("https://leetcode.com/discuss/general-discussion/971272/Python-Graph-Algorithms-One-Place-for-quick-revision")])])}),[],!1,null,null,null);a.default=n.exports}}]);