(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{627:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("img",{staticClass:"medium-zoom",attrs:{src:"/algo/subarray-sum-equals-k-ii.png",alt:"https://www.lintcode.com/problem/subarray-sum-equals-k-ii"}}),s._v(" "),a("h2",{attrs:{id:"solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[s._v("#")]),s._v(" Solution")]),s._v(" "),a("p",[s._v("While the previous problem "),a("a",{attrs:{href:"subarray-sum-equals-k"}},[s._v("subarray sum equals k")]),s._v(" asks for "),a("strong",[s._v("total number")]),s._v(", this problems asks for "),a("strong",[s._v("min size")]),s._v(".")]),s._v(" "),a("p",[s._v("Similar as previous problem "),a("a",{attrs:{href:"subarray-sum-equals-k"}},[s._v("subarray sum equals k")]),s._v(" which TLE for squared time, we will just explore the linear time solution.")]),s._v(" "),a("h3",{attrs:{id:"hashmap-linear-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-linear-time"}},[s._v("#")]),s._v(" HashMap (linear time)")]),s._v(" "),a("p",[s._v("Different from "),a("RouterLink",{attrs:{to:"/algo/subarray-sum-equals-k.html#vanilla-hashmap"}},[s._v("Vanilla HashMap")]),s._v(" which stores mappings from prefix sum to count, here we need to store prefix sum to index instead.")],1),s._v(" "),a("p",[s._v("Note that "),a("code",[s._v("hashmap")]),s._v(" is initialized w/ "),a("code",[s._v("{0:-1}")]),s._v(" to handle the "),a("code",[s._v("sum(nums)==k")]),s._v(" case.")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("subarraySumEqualsKII")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    hashmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("maxsize\n    csum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        csum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" csum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("k "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" hashmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("hashmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("csum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        hashmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("csum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" res"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v("sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("maxsize "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);