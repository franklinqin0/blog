(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{662:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("While studying for interview problems, I use "),s("code",[t._v("Python3")]),t._v(" as the PL and feel like concluding its commonly used features.")]),t._v(" "),s("h2",{attrs:{id:"why-python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#why-python"}},[t._v("#")]),t._v(" Why Python")]),t._v(" "),s("ul",[s("li",[t._v("elegant and clear")]),t._v(" "),s("li",[t._v("high-readability")])]),t._v(" "),s("h2",{attrs:{id:"pyenv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pyenv"}},[t._v("#")]),t._v(" Pyenv")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://realpython.com/intro-to-pyenv",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intro to Pyenv"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"scopes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scopes"}},[t._v("#")]),t._v(" Scopes")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://realpython.com/python-scope-legb-rule",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python scopes"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" Int")]),t._v(" "),s("p",[t._v("The # bits of number "),s("code",[t._v("n")]),t._v(" is "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[t._v("log")]),s("mo",[t._v("⁡")]),s("mi",[t._v("n")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\log n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"mop"},[t._v("lo"),s("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("n")])])])])]),t._v(".")],1),t._v(" "),s("h2",{attrs:{id:"modular-arithmatic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modular-arithmatic"}},[t._v("#")]),t._v(" Modular Arithmatic")]),t._v(" "),s("p",[s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("n")]),s("mo",[t._v("+")]),s("mi",[t._v("m")]),s("msup",[s("mo",{attrs:{stretchy:"false"}},[t._v(")")]),s("mi",[t._v("k")])],1),s("mspace"),s("mspace",{attrs:{width:"0.6666666666666666em"}}),s("mrow",[s("mi",{attrs:{mathvariant:"normal"}},[t._v("m")]),s("mi",{attrs:{mathvariant:"normal"}},[t._v("o")]),s("mi",{attrs:{mathvariant:"normal"}},[t._v("d")])],1),s("mtext"),s("mtext"),s("mi",[t._v("n")]),s("mo",[t._v("=")]),s("mi",[t._v("m")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(n+m)^k \\mod n = m")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("+")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.099108em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("m")]),s("span",{staticClass:"mclose"},[s("span",{staticClass:"mclose"},[t._v(")")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.849108em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mathdefault mtight",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])])])])])]),s("span",{staticClass:"mspace allowbreak"}),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.6666666666666666em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathrm"},[t._v("m")]),s("span",{staticClass:"mord mathrm"},[t._v("o")]),s("span",{staticClass:"mord mathrm"},[t._v("d")])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[t._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("m")])])])])])],1),t._v(" "),s("h3",{attrs:{id:"bit-manipulation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bit-manipulation"}},[t._v("#")]),t._v(" Bit Manipulation")]),t._v(" "),s("p",[s("code",[t._v("n & (n-1)")]),t._v(" would eliminate the rightmost 1-bit.")]),t._v(" "),s("h3",{attrs:{id:"overflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overflow"}},[t._v("#")]),t._v(" Overflow")]),t._v(" "),s("p",[t._v("Basically, Python doesn't need to worry about integer overflow.")]),t._v(" "),s("p",[t._v("Following are from "),s("a",{attrs:{href:"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("EPI in Python")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Integers:")]),t._v(" "),s("div",{staticClass:"custom-block theorem"},[s("p",{staticClass:"title"}),s("p",[t._v("Integers in Python3 are "),s("strong",[t._v("unbounded")]),t._v("-the "),s("em",[t._v("maximum integer")]),t._v(" representable is "),s("em",[t._v("a function of the available memory")]),t._v(". The constant "),s("code",[t._v("sys.maxsize")]),t._v(" can be used to find the word-size; specifically, it's the maximum value integer that can be stored in the word, e.g., "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[t._v("2")]),s("mo",[t._v("∗")]),s("mo",[t._v("∗")]),s("mn",[t._v("63")]),s("mo",[t._v("−")]),s("mi",[t._v("L")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2**63 - L")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("∗")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[t._v("∗")]),s("span",{staticClass:"mord"},[t._v("6")]),s("span",{staticClass:"mord"},[t._v("3")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("L")])])])])]),t._v(" on a "),s("code",[t._v("64")]),t._v("-bit machine. Bounds on floats are specified in "),s("code",[t._v("sys.float-info")]),t._v(".")],1)]),s("p",[t._v("Float:")]),t._v(" "),s("div",{staticClass:"custom-block theorem"},[s("p",{staticClass:"title"}),s("p",[t._v("Unlike integers, floats are not infinite precision, and it's convenient to refer to infinity as "),s("code",[t._v("float('inf ')")]),t._v(" and "),s("code",[t._v("float('-inf ')")]),t._v(". These values are comparable to integers, and can be used to create pseudo max-int and pseudo min-int.")])]),s("h3",{attrs:{id:"bin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bin"}},[t._v("#")]),t._v(" bin")]),t._v(" "),s("p",[t._v("From "),s("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/library/functions.html#bin")]),t._v(":")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("bin")]),t._v(" "),s("p",[s("code",[t._v("bin")]),t._v(" converts an integer number to a binary string prefixed with “0b”. "),s("code",[t._v("[2:]")]),t._v(" takes away "),s("code",[t._v("0b")]),t._v(" and returns the binary int as a string.")])]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("n")]),t._v(" is an integer, "),s("code",[t._v("int(bin(n)[2:],2)")]),t._v(" would return the original "),s("code",[t._v("n")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"division"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#division"}},[t._v("#")]),t._v(" Division")]),t._v(" "),s("p",[s("code",[t._v("divmod")])]),t._v(" "),s("h3",{attrs:{id:"division-operators-and"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#division-operators-and"}},[t._v("#")]),t._v(" Division Operators "),s("code",[t._v("/")]),t._v(" and "),s("code",[t._v("//")])]),t._v(" "),s("p",[t._v("The division operators difference in Python 2 and 3 is described "),s("a",{attrs:{href:"https://www.geeksforgeeks.org/division-operator-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Python 2 uses "),s("code",[t._v("/")]),t._v(" for "),s("strong",[t._v("floor division")]),t._v(" if "),s("em",[t._v("both arguments")]),t._v("(the dividend and divisor) are "),s("em",[t._v("integers")]),t._v(".")]),t._v(" "),s("p",[t._v("Python 2 uses "),s("code",[t._v("//")]),t._v(" for "),s("strong",[t._v("floor division")]),t._v(" for "),s("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),s("p",[t._v("Python 3 uses "),s("code",[t._v("/")]),t._v(" for "),s("strong",[t._v("floating point division")]),t._v(" for "),s("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),s("p",[t._v("Python 3 uses "),s("code",[t._v("//")]),t._v(" for "),s("strong",[t._v("floor division")]),t._v(" for "),s("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),s("p",[t._v("So the behavior of “//” is same for Python 2 and 3.")]),t._v(" "),s("p",[t._v("Personally I like Python 3 for division behavior as it's clearer and causes less confusion.")]),t._v(" "),s("h2",{attrs:{id:"data-structures"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}},[t._v("#")]),t._v(" Data Structures")]),t._v(" "),s("p",[t._v("Sometimes it's not so obvious to see how to use a data structure in "),s("code",[t._v("Python3")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"string-immutable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-immutable"}},[t._v("#")]),t._v(" String (Immutable)")]),t._v(" "),s("p",[t._v("'' or \"\"")]),t._v(" "),s("h4",{attrs:{id:"f-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#f-string"}},[t._v("#")]),t._v(" f-string")]),t._v(" "),s("p",[t._v("From "),s("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/reference/lexical_analysis.html#f-strings")]),t._v(":")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("f-strings")]),t._v(" "),s("p",[t._v("For example: "),s("code",[t._v("f'{6:08b}'")]),t._v(".")]),t._v(" "),s("p",[t._v("Starting with "),s("code",[t._v("f")]),t._v(", represent int "),s("code",[t._v("6")]),t._v(" in "),s("code",[t._v("8")]),t._v(" "),s("code",[t._v("b")]),t._v("inary digits with "),s("code",[t._v("0")]),t._v("'s padded at front. So the evaluated result is: "),s("code",[t._v("'00000110'")]),t._v(".")]),t._v(" "),s("p",[t._v("Equivalently, could do "),s("code",[t._v("bin(6)[2:].zfill(8)")]),t._v(", where "),s("code",[t._v("zfill")]),t._v(" added the "),s("code",[t._v("0")]),t._v("'s padded at front.")])]),t._v(" "),s("h3",{attrs:{id:"hashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),s("p",[t._v("set()")]),t._v(" "),s("h3",{attrs:{id:"hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),s("p",[t._v("{}\n"),s("code",[t._v("get(self, key, default=None)")]),t._v(" returns the value for key if key is in the dictionary, else default.")]),t._v(" "),s("p",[t._v("Dictionary associates values with immutable keys which means you cannot use lists as keys.")]),t._v(" "),s("h3",{attrs:{id:"array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),s("p",[t._v("[]")]),t._v(" "),s("h3",{attrs:{id:"matrix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#matrix"}},[t._v("#")]),t._v(" Matrix")]),t._v(" "),s("p",[s("code",[t._v("[0]*2")]),t._v(" "),s("code",[t._v("[[0 for j in range(num_cols)] for i in range(num_rows)]")]),t._v("\nSince "),s("code",[t._v("i")]),t._v(" and "),s("code",[t._v("j")]),t._v(" are not used, can simplify the above to:\n"),s("code",[t._v("[[0] for _ in range(num_cols) for _ in range(num_rows)]")])]),t._v(" "),s("h3",{attrs:{id:"stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),s("p",[t._v("[]\n"),s("code",[t._v("from collections import deque")]),t._v(" and initialize a stack as "),s("code",[t._v("deque()")])]),t._v(" "),s("h3",{attrs:{id:"queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),s("p",[t._v("More at "),s("a",{attrs:{href:"https://www.geeksforgeeks.org/queue-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Queue in Python"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"linked-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[t._v("#")]),t._v(" Linked List")]),t._v(" "),s("p",[t._v("[]")]),t._v(" "),s("h3",{attrs:{id:"shallow-flatten"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shallow-flatten"}},[t._v("#")]),t._v(" Shallow Flatten")]),t._v(" "),s("p",[t._v("We could have nested for loops")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" sublist "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" list_of_lists "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sublist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("Or use "),s("code",[t._v("reduce")]),t._v(" from "),s("code",[t._v("functools")])]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" functools "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" l1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" l1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" l2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" list_of_lists"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Or use "),s("code",[t._v("chain")]),t._v(" from "),s("code",[t._v("itertools")])]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" itertools "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chain\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list_of_lists"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("There may be many other possible ways.")]),t._v(" "),s("h3",{attrs:{id:"tuple-immutable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple-immutable"}},[t._v("#")]),t._v(" Tuple (Immutable)")]),t._v(" "),s("p",[t._v("()")]),t._v(" "),s("h3",{attrs:{id:"list-cannot-be-hashed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-cannot-be-hashed"}},[t._v("#")]),t._v(" List Cannot be Hashed")]),t._v(" "),s("p",[t._v('A list adding to a set would cause error "list objects are unhashable" b/c '),s("strong",[t._v("list is mutable")]),t._v(" but elements in set are not supposed to change after being added and hashed. Instead of "),s("code",[t._v("list")]),t._v(", I could add a "),s("code",[t._v("tuple")]),t._v(" to the set, as described in "),s("a",{attrs:{href:"https://stackoverflow.com/a/1306653/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("this Stack Overflow answer"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"defaultdict-of-defaultdict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defaultdict-of-defaultdict"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://stackoverflow.com/a/5029958/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("defaultdict of defaultdict"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("defaultdict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" defaultdict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("The argument of a defaultdict (in this case is lambda: defaultdict(int)) will be called when you try to access a key that doesn't exist. The return value of it will be set as the new value of this key, which means in our case the value of d[Key_doesnt_exist] will be defaultdict(int).")]),t._v(" "),s("p",[t._v("If you try to access a key from this last defaultdict i.e. d[Key_doesnt_exist][key_doesnt_exist] it will return 0, which is the return value of the argument of the last defaultdict i.e. int().")]),t._v(" "),s("p",[t._v("To iterate:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" courses "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" schedulesByPECourses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    pe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sc "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" courses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        pe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"algorithms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algorithms"}},[t._v("#")]),t._v(" Algorithms")]),t._v(" "),s("p",[t._v("Prefix Sum can look for subarray sum O(1) every time\n前缀和：多次查询区间和 O(1)/次")]),t._v(" "),s("ul",[s("li",[t._v("前缀和是⼀种思想，可以⽤于许多的减少时间复杂度的地⽅")]),t._v(" "),s("li",[t._v("我们不⼀定会使⽤前缀“和”，可能是其他⽐如积，最⼤值，最⼩值这样 的值。主要还是要根据题⽬来考虑使⽤什么。")]),t._v(" "),s("li",[t._v("哈希表是⼀种⼯具，与前缀和配套使⽤可以达到“⽤空间换时间”的⽬ 的。")])]),t._v(" "),s("p",[t._v("双指针：根据区间和调整区间\n树状数组：单点修改，区间查询\n线状树：区间修改")]),t._v(" "),s("p",[t._v("Two Pointers is used interchangbly w/ sliding window, as the way of thinking is more important than name and style.")]),t._v(" "),s("p",[t._v("95% of the time, summing over a window requires prefix sum. Exceptions: 线状树, 互动数组")]),t._v(" "),s("p",[t._v("Edge cases to watch for:")]),t._v(" "),s("ol",[s("li",[t._v("0, empty input of string/array/any ds")]),t._v(" "),s("li",[t._v("TLE / infinite loop")])]),t._v(" "),s("p",[s("code",[t._v("csum")]),t._v(" means cumulative sum.")]),t._v(" "),s("p",[t._v("隐式图：没有明确的点和边的关系（不会定义 Node 等）")]),t._v(" "),s("p",[t._v("矩阵就是⼀种经典的隐式图问题")])])}),[],!1,null,null,null);a.default=n.exports}}]);