(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{377:function(n,t,s){"use strict";s.r(t);var e=s(1),a=Object(e.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("This blog features some of the most commonly used algorithms.")]),n._v(" "),s("p",[n._v("Thanks to:")]),n._v(" "),s("ul",[s("li",[n._v("Walker M. White and Lillian Lee, teacher of CS1110: "),s("em",[n._v("Intro to Programming in Python")])]),n._v(" "),s("li",[n._v("David Gries, teacher of CS2110: "),s("em",[n._v("OOP in Java")])]),n._v(" "),s("li",[n._v("Michael Clarkson, teacher of CS3110: "),s("em",[n._v("FP in OCaml")])]),n._v(" "),s("li",[n._v("Eva Tardos, teacher of CS4820: "),s("em",[n._v("Intro to Algorithms")])])]),n._v(" "),s("p",[n._v("who taught me the core CS courses to help me write, categorize and understand the following algorithms.")]),n._v(" "),s("h2",{attrs:{id:"import-libraries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-libraries"}},[n._v("#")]),n._v(" Import Libraries")]),n._v(" "),s("div",{staticClass:"language-py line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("import")]),n._v(" random\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h2",{attrs:{id:"dutch-national-flag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dutch-national-flag"}},[n._v("#")]),n._v(" Dutch National Flag")]),n._v(" "),s("div",{staticClass:"language-py line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("def")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("dnf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[n._v('"""Returns: Partition points for the Dutch National Flag\n    \n    The Dutch National Flag algorithm arranges the elements of b[h..k]\n    so that negatives are first, then 0s, then positives. It returns a\n    tuple (i,j)  representing the two partition points.\n    \n    Parameter b: The list to rearrange\n    Precondition: b is a mutable sequence (e.g. a list).\n    \n    Parameter h: The starting point to sort\n    Precondition: h is an int and a valid position in b\n    \n    Parameter k: The ending poing to sort\n    Precondition: k is an int and a valid position in b\n    """')]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("assert")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" `b`"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("' is not a list'")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("assert")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v(" h "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("and")]),n._v(" h "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" `h`"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("' is not a valid position in the list'")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("assert")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v(" k "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("and")]),n._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" `k`"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("' is not a valid position in the list'")]),n._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# Loop variables to satisfy the invariant")]),n._v("\n    t "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" h\n    j "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" k\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" k"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# inv: b[h..t-1] < 0, b[t..i-1] unknown, b[i..j] = 0, and b[j+1..k] > 0 ")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),n._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            _swap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n            t "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("elif")]),n._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            i "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" \n            _swap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n            i "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n            j "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# post: b[h..i-1] < 0, b[i..j] = 0, and b[j+1..k] > 0 ")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# Return dividers as a tuple")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("h1",{attrs:{id:"note-this-uses-a-different-invariant-than-the-lab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#note-this-uses-a-different-invariant-than-the-lab"}},[n._v("#")]),n._v(" NOTE: This uses a DIFFERENT invariant than the lab")]),n._v(" "),s("p",[n._v('def partition(b, h, k):\n"""Returns: The new position of pivot in partitioned list b[h..k].')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("The pivot is the initial value x = b[h].  This function rearranges the\nlist so that elements <= x are before the pivot and elements >= x are\nafter the pivot.\n\nParameter b: The list to rearrange\nPrecondition: b is a mutable sequence (e.g. a list).\n\nParameter h: The starting point to sort\nPrecondition: h is an int and a valid position in b\n\nParameter k: The ending poing to sort\nPrecondition: k is an int and a valid position in b\n\"\"\"\nassert type(b) == list, `b`+' is not a list'\nassert 0 <= h and h < len(b), `h`+' is not a valid position in the list'\nassert 0 <= k and k < len(b), `k`+' is not a valid position in the list'\n\n# position i is end of first paritition range\ni = h\n# position j is BEFORE beginning of second partition range\nj = k\n\n# Find the first element in the list.\nx = b[h]\n    \n# invariant: b[h..i-1] < x, b[i] = x, b[i+1..j] unknown, and  b[j+1..k] >= x\nwhile i < j:\n    if b[i+1] >= x:\n        # Move this to the end of the block.\n        _swap(b,i+1,j)\n        j = j - 1\n    else:   # b[i+1] < x\n        _swap(b,i,i+1)\n        i = i + 1\n    \n# post: b[h..i-1] < x, b[i] is x, and b[i+1..k] >= x\nreturn i\n")])])]),s("h1",{attrs:{id:"helper-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#helper-function"}},[n._v("#")]),n._v(" HELPER FUNCTION")]),n._v(" "),s("p",[n._v('def _swap(b, h, k):\n"""Procedure swaps b[h] and b[k]')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The list to rearrange\nPrecondition: b is a mutable sequence (e.g. a list).\n\nParameter h: The first position to swap\nPrecondition: h is an int and a valid position in b\n\nParameter k: The second position to swap\nPrecondition: k is an int and a valid position in b\n"""\n# We typically do not enforce preconditions on hidden helpers\ntemp = b[h]\nb[h] = b[k]\nb[k] = temp\n')])])]),s("h1",{attrs:{id:"linear-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linear-search"}},[n._v("#")]),n._v(" Linear search")]),n._v(" "),s("p",[n._v('def linear_search(b,c):\n"""Returns: index of first occurrence of c in b; -1 if not found.')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to search\nPrecondition: b is a sequence\n\nParameter c: The value to search for\nPrecondition: NONE (c can be any value)"""\n# Quick way to check if a sequence\nassert len(b) >= 0, `b`+\' is a not a sequence (list, string, or tuple)\'\n\n# Store in i the index of the first c in b[0..]\ni = 0\n\n# invariant: c is not in b[0..i-1]\nwhile i < len(b) and b[i] != c:\n    i = i + 1;\n    \n# post: b[i] == c OR (i == len(b) and c is not in b[0..i-1])\nreturn i if i < len(b) else -1\n')])])]),s("h1",{attrs:{id:"binary-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binary-search"}},[n._v("#")]),n._v(" Binary search")]),n._v(" "),s("p",[n._v('def binary_search(b,c):\n"""Returns: index of first occurrence of c in b; -1 if not found.')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to search\nPrecondition: b is a SORTED sequence\n\nParameter c: The value to search for\nPrecondition: NONE (c can be any value)"""\n# Quick way to check if a sequence; CANNOT easily check sorted\nassert len(b) >= 0, `b`+\' is a not a sequence (list, string, or tuple)\'\n\n# Store in i the value BEFORE beginning of range to search\ni = 0\n# Store in j the end of the range to search (element after)\nj = len(b)\n# The middle position of the range\nmid = (i+j)/2\n\n# invariant; b[0..i-1] < c, b[i..j-1] unknown, b[j..] >= c \nwhile j > i:\n    if b[mid] < c:\n        i = mid+1\n    else:     # b[mid] >= c\n        j = mid\n        \n    # Compute a new middle.\n    mid = (i+j)/2\n\n# post: i == j and b[0..i-1] < c and b[j..] >= c\nreturn i if (i < len(b) and b[i] == c) else -1\n')])])]),s("p",[n._v('def isort(b):\n"""Insertion Sort: Sorts the array b in n^2 time')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to sort\nPrecondition: b is a mutable sequence (e.g. a list)."""\nassert type(b) == list, `b`+\' is not a list\'\n\n# Start from beginning of list\ni = 0\n\n# inv: b[0..i-1] sorted    \nwhile i  < len(b):\n    _push_down(b,i)\n    i = i + 1\n\n# post: b[0..len(b)-1] sorted\n')])])]),s("h1",{attrs:{id:"helper-function-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#helper-function-2"}},[n._v("#")]),n._v(" HELPER FUNCTION")]),n._v(" "),s("p",[n._v('def _push_down(b, k):\n"""Moves the value at position k into its sorted position in b[0.k-1].')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The list to rearrange\nPrecondition: b is a list, with b[0..k-1] sorted\n\nParameter k: The position to push down into b[0..k-1]\nPrecondition: k is an int and a valid position in b"""\n# We typically do not enforce preconditions on hidden helpers\n\n# Start from position k\nj = k\n\n# inv: b[j..k] is sorted\nwhile j > 0:\n    if b[j-1] > b[j]:\n        _swap(b,j-1,j)\n    j = j - 1\n# post: b[0..k] is sorted     \n')])])]),s("p",[n._v('def ssort(b):\n"""Selection Sort: Sorts the array b in n^2 time')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to sort\nPrecondition: b is a mutable sequence (e.g. a list)."""\nassert type(b) == list, `b`+\' is not a list\'\n\n# Start from beginning of list\ni = 0\n\n# inv: b[0..i-1] sorted    \nwhile i < len(b):\n    index = _min_index(b,i);\n    _swap(b,i,index)    \n    i = i+1\n# post: b[0..len(b)-1] sorted\n')])])]),s("h1",{attrs:{id:"helper-function-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#helper-function-3"}},[n._v("#")]),n._v(" HELPER FUNCTION")]),n._v(" "),s("p",[n._v('def _min_index(b, h):\n"""Returns: The index of the minimum value in b[h..]')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to search\nPrecondition: b is a mutable sequence (e.g. a list)."""\n# We typically do not enforce preconditions on hidden helpers\n\n# Start from position h\ni = h\nindex = h;\n\n# inv: index position of min in b[h..i-1]\nwhile i < len(b):\n    if b[i] < b[index]:\n        index = i\n    i = i+1\n    \n# post: index position of min in b[h..len(b)-1]\nreturn index\n')])])]),s("p",[n._v('def qsort(b):\n"""Quick Sort: Sorts the array b in n log n average time')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to sort\nPrecondition: b is a mutable sequence (e.g. a list)."""\nassert type(b) == list, `b`+\' is not a list\'\n\n# Send everything to the recursive helper\n_qsort_helper(b,0,len(b)-1)\n')])])]),s("p",[n._v('def _qsort_helper(b, h, k):\n"""Quick Sort: Sorts the array b[h..k] in n log n average time')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The sequence to sort\nPrecondition: b is a mutable sequence (e.g. a list).\n\nParameter h: The starting point to sort\nPrecondition: h is an int and a valid position in b\n\nParameter k: The ending poing to sort\nPrecondition: k is an int and a valid position in b\n"""\n# We typically do not enforce preconditions on hidden helpers\nif k-h < 1:            # BASE CASE\n    return \n\n# RECURSIVE CASE\nj = partition(b, h, k)\n# b[h..j-1] <= b[j] <= b[j+1..k]\n# Sort b[h..j-1]  and  b[j+1..k]\n_qsort_helper(b, h, j-1)\n_qsort_helper(b, j+1, k)\n')])])]),s("p",[n._v('def roll(p):\n"""Returns: a random int in 0..len(p)-1; i returned with prob p[i].')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter p: The die value distribution\nPrecondition: p a list of positive floats that sum to at least 1."""\n# Do not assert precondition; too complicated\n\nr = random.random()     # r in [0,1)\n# Think of interval [0,1] as divided into segments of size p[i]\n# Store into i the segment number in which r falls.\ni = 0\nsum_of = p[0]\nwhile r >= sum_of:\n    sum_of = sum_of + p[i+1]\n    i = i + 1\n    \nreturn i\n')])])]),s("p",[n._v('def scramble(b):\n"""Scrambles the list to resort again')]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('Parameter b: The list to scramble\nPrecondition: b is a mutable sequence (e.g. a list)."""\nassert type(b) == list, `b`+\' is not a list\'\n\n# Start from the beginning\ni = 0\n\n# inv: b[0..i-1] is scrambled\n\nwhile i < len(b):\n    size = len(b)-i\n    pos  = int(random.random()*size)\n    _swap(b,i,i+pos)\n    i = i+1\n# post: b[0..len(b)] is scrambled    \n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);