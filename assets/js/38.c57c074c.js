(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{398:function(t,a,e){"use strict";e.r(a);var r=e(1),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("While studying for interview problems, I use "),e("code",[t._v("Python3")]),t._v(" as the PL and feel like concluding its commonly used features.")]),t._v(" "),e("h2",{attrs:{id:"int"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" Int")]),t._v(" "),e("h3",{attrs:{id:"overflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overflow"}},[t._v("#")]),t._v(" Overflow")]),t._v(" "),e("p",[t._v("Basically, Python doesn't need to worry about integer overflow.")]),t._v(" "),e("p",[t._v("Following are from "),e("a",{attrs:{href:"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("EPI in Python")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Integers:")]),t._v(" "),e("blockquote",[e("p",[t._v("Integers in Python3 are "),e("strong",[t._v("unbounded")]),t._v("-the "),e("em",[t._v("maximum integer")]),t._v(" representable is "),e("em",[t._v("a function of the available memory")]),t._v(". The constant "),e("code",[t._v("sys.maxsize")]),t._v(" can be used to find the word-size; specifically, it's the maximum value integer that can be stored in the word, e.g., "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[e("svg",{staticStyle:{"vertical-align":"-0.186ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"12.226ex",height:"1.731ex",viewBox:"0 -683 5403.9 765"}},[e("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[e("g",{attrs:{"data-mml-node":"math"}},[e("g",{attrs:{"data-mml-node":"mn"}},[e("path",{attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(722.2, 0)"}},[e("path",{attrs:{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(1722.4, 0)"}},[e("path",{attrs:{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"}})]),e("g",{attrs:{"data-mml-node":"mn",transform:"translate(2500.4, 0)"}},[e("path",{attrs:{"data-c":"36",d:"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"}}),e("path",{attrs:{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z",transform:"translate(500, 0)"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(3722.7, 0)"}},[e("path",{attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(4722.9, 0)"}},[e("path",{attrs:{"data-c":"4C",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"}})])])])])]),t._v(" on a "),e("code",[t._v("64")]),t._v("-bit machine. Bounds on floats are specified in "),e("code",[t._v("sys.float-info")]),t._v(".")],1)]),t._v(" "),e("p",[t._v("Float:")]),t._v(" "),e("blockquote",[e("p",[t._v("Unlike integers, floats are not infinite precision, and it's convenient to refer to infinity as "),e("code",[t._v("float('inf ')")]),t._v(" and "),e("code",[t._v("float('-inf ')")]),t._v(". These values are comparable to integers, and can be used to create pseudo max-int and pseudo min-int.")])]),t._v(" "),e("h3",{attrs:{id:"bin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bin"}},[t._v("#")]),t._v(" bin")]),t._v(" "),e("p",[t._v("From "),e("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/library/functions.html#bin")]),t._v(":")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("bin")]),t._v(" "),e("p",[e("code",[t._v("bin")]),t._v(" converts an integer number to a binary string prefixed with “0b”. "),e("code",[t._v("[2:]")]),t._v(" takes away "),e("code",[t._v("0b")]),t._v(" and returns the binary int as a string.")])]),t._v(" "),e("h2",{attrs:{id:"division"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#division"}},[t._v("#")]),t._v(" Division")]),t._v(" "),e("h3",{attrs:{id:"division-operators-and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#division-operators-and"}},[t._v("#")]),t._v(" Division Operators "),e("code",[t._v("/")]),t._v(" and "),e("code",[t._v("//")])]),t._v(" "),e("p",[t._v("The division operators difference in Python 2 and 3 is described "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/division-operator-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Python 2 uses "),e("code",[t._v("/")]),t._v(" for "),e("strong",[t._v("floor division")]),t._v(" if "),e("em",[t._v("both arguments")]),t._v("(the dividend and divisor) are "),e("em",[t._v("integers")]),t._v(".")]),t._v(" "),e("p",[t._v("Python 2 uses "),e("code",[t._v("//")]),t._v(" for "),e("strong",[t._v("floor division")]),t._v(" for "),e("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),e("p",[t._v("Python 3 uses "),e("code",[t._v("/")]),t._v(" for "),e("strong",[t._v("floating point division")]),t._v(" for "),e("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),e("p",[t._v("Python 3 uses "),e("code",[t._v("//")]),t._v(" for "),e("strong",[t._v("floor division")]),t._v(" for "),e("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),e("p",[t._v("So the behavior of “//” is same for Python 2 and 3.")]),t._v(" "),e("p",[t._v("Personally I like Python 3 for division behavior as it's clearer and causes less confusion.")]),t._v(" "),e("h2",{attrs:{id:"data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}},[t._v("#")]),t._v(" Data Structures")]),t._v(" "),e("p",[t._v("Sometimes it's not so obvious to see how to use a data structure in "),e("code",[t._v("Python3")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"string-immutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-immutable"}},[t._v("#")]),t._v(" String (Immutable)")]),t._v(" "),e("p",[t._v("'' or \"\"")]),t._v(" "),e("h4",{attrs:{id:"f-string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#f-string"}},[t._v("#")]),t._v(" f-string")]),t._v(" "),e("p",[t._v("From "),e("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/reference/lexical_analysis.html#f-strings")]),t._v(":")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("f-strings")]),t._v(" "),e("p",[t._v("For example: "),e("code",[t._v("f'{6:08b}'")]),t._v(".")]),t._v(" "),e("p",[t._v("Starting with "),e("code",[t._v("f")]),t._v(", represent int "),e("code",[t._v("6")]),t._v(" in "),e("code",[t._v("8")]),t._v(" "),e("code",[t._v("b")]),t._v("inary digits with "),e("code",[t._v("0")]),t._v("'s padded at front. So the evaluated result is: "),e("code",[t._v("'00000110'")]),t._v(".")]),t._v(" "),e("p",[t._v("Equivalently, could do "),e("code",[t._v("bin(6)[2:].zfill(8)")]),t._v(", where "),e("code",[t._v("zfill")]),t._v(" added the "),e("code",[t._v("0")]),t._v("'s padded at front.")])]),t._v(" "),e("h3",{attrs:{id:"hashset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),e("p",[t._v("set()")]),t._v(" "),e("h3",{attrs:{id:"hashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),e("p",[t._v("{}")]),t._v(" "),e("h3",{attrs:{id:"array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),e("p",[t._v("[]")]),t._v(" "),e("h3",{attrs:{id:"matrix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#matrix"}},[t._v("#")]),t._v(" Matrix")]),t._v(" "),e("p",[t._v("[0]*2\n[[0] for i in range()]...")]),t._v(" "),e("h3",{attrs:{id:"stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),e("p",[t._v("[]\n"),e("code",[t._v("from collections import deque")]),t._v(" and initialize a stack as "),e("code",[t._v("deque()")])]),t._v(" "),e("h3",{attrs:{id:"queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),e("p",[t._v("More at "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/queue-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Queue in Python"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"linked-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[t._v("#")]),t._v(" Linked List")]),t._v(" "),e("p",[t._v("[]")]),t._v(" "),e("h3",{attrs:{id:"tuple-immutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tuple-immutable"}},[t._v("#")]),t._v(" Tuple (Immutable)")]),t._v(" "),e("p",[t._v("()")])])}),[],!1,null,null,null);a.default=s.exports}}]);