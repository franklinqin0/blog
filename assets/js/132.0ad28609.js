(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{653:function(t,a,s){"use strict";s.r(a);var e=s(3),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"database-management-system"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#database-management-system"}},[t._v("#")]),t._v(" Database Management System")]),t._v(" "),s("p",[t._v("A "),s("strong",[t._v("DBMS")]),t._v(" is software that allows applications to store and analyze information in a database.")]),t._v(" "),s("p",[t._v("A general-purpose DBMS is designed to allow the definition, creation, querying, update, and administration of databases.")]),t._v(" "),s("h2",{attrs:{id:"early-dbmss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#early-dbmss"}},[t._v("#")]),t._v(" Early DBMSs")]),t._v(" "),s("p",[t._v("Database applications were difficult to build and maintain.")]),t._v(" "),s("p",[t._v("Tight coupling between logical and physical layers.")]),t._v(" "),s("p",[t._v("You have to (roughly) know what queries your app would execute before you deployed the database.")]),t._v(" "),s("h2",{attrs:{id:"relational-model"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relational-model"}},[t._v("#")]),t._v(" Relational Model")]),t._v(" "),s("p",[t._v("Database abstraction to avoid maintenance (of physical layer):")]),t._v(" "),s("ul",[s("li",[t._v("Store database in simple data structures.")]),t._v(" "),s("li",[t._v("Access data through high-level language.")]),t._v(" "),s("li",[t._v("Physical storage left up to implementation.")])]),t._v(" "),s("p",[t._v("A "),s("em",[t._v("data model")]),t._v(" is collection of concepts for describing the data in a database.")]),t._v(" "),s("p",[t._v("Relational (most RDBMSs)"),s("br"),t._v("\nNOSQL: Key/Value, Graph, Document, Column-family"),s("br"),t._v("\nArray/Matrix (machine learning)"),s("br"),t._v("\nHierarchical, Network (obsolete)")]),t._v(" "),s("p",[t._v("A "),s("em",[t._v("schema")]),t._v(" is a description of a particular collection of data, using a given data model.")]),t._v(" "),s("p",[s("em",[t._v("Structure")]),t._v(": The definition of relations and their contents."),s("br"),t._v(" "),s("em",[t._v("Integrity")]),t._v(": Ensure the database’s contents satisfy constraints."),s("br"),t._v(" "),s("em",[t._v("Manipulation")]),t._v(": How to access and modify a database’s contents.")]),t._v(" "),s("p",[t._v("A "),s("em",[t._v("relation")]),t._v("(table) is "),s("strong",[t._v("unordered set")]),t._v(" that contain the relationship attributes that represent entities."),s("br"),t._v("\nA "),s("em",[t._v("tuple")]),t._v("(row) is a set of "),s("strong",[t._v("attribute values")]),t._v(" (also known as its domain) in the relation.")]),t._v(" "),s("p",[t._v("n-ary Relation = Table with n columns")]),t._v(" "),s("ul",[s("li",[t._v("values are (normally) atomic/scalar")]),t._v(" "),s("li",[t._v("the special "),s("strong",[t._v("NULL")]),t._v(" is a member of every domain")])]),t._v(" "),s("p",[t._v("A relation's "),s("em",[t._v("primary key")]),t._v(" uniquely identifies a single tuple."),s("br"),t._v("\nSome DBMSs automatically create an internal primary key if you don't define one.")]),t._v(" "),s("p",[t._v("A "),s("em",[t._v("foreign key")]),t._v(" specifies that an attribute from one relation has to map to a tuple in another relation.")]),t._v(" "),s("p",[t._v("The relational model is independent of any query language implementation.")]),t._v(" "),s("h2",{attrs:{id:"data-manipulation-languages-dml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-manipulation-languages-dml"}},[t._v("#")]),t._v(" Data Manipulation Languages (DML)")]),t._v(" "),s("p",[t._v("Procedural (Relational Algebra)"),s("br"),t._v("\nThe query specifies the (high-level) strategy the DBMS should use to find the desired result.")]),t._v(" "),s("p",[t._v("Non-Procedural (Relational Calculus)"),s("br"),t._v("\nThe query specifies only what data is wanted and not how to find it.")]),t._v(" "),s("h2",{attrs:{id:"relational-algebra"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relational-algebra"}},[t._v("#")]),t._v(" Relational Algebra")]),t._v(" "),s("p",[t._v("Fundamental operations to retrieve and manipulate tuples in a relation."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" Based on set algebra.")],1),t._v(" "),s("p",[t._v("Each operator takes one or more relations as its inputs and outputs a new relation."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" We can “chain” operators together to create more complex operations.")],1),t._v(" "),s("h3",{attrs:{id:"select"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" Select")]),t._v(" "),s("p",[t._v("Choose a subset of the tuples from a relation that satisfies a selection predicate."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" Predicate acts as a filter to retain only tuples that fulfill its qualifying requirement."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" Can combine multiple predicates using conjunctions / disjunctions.")],1),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msub",[s("mi",[t._v("σ")]),s("mtext",[t._v("predicate")])],1),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\sigma_{\\text{predicate}}(R)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.036108em","vertical-align":"-0.286108em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[t._v("σ")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t vlist-t2"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.3361079999999999em"}},[s("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord text mtight"},[s("span",{staticClass:"mord mtight"},[t._v("predicate")])])])])])]),s("span",{staticClass:"vlist-s"},[t._v("​")])]),s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.286108em"}},[s("span")])])])])]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),s("br"),t._v("\nExample: "),s("code",[t._v("SELECT * FROM R WHERE a_id='a2' AND b_id>102;")])],1),t._v(" "),s("h3",{attrs:{id:"projection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#projection"}},[t._v("#")]),t._v(" Projection")]),t._v(" "),s("p",[t._v("Generate a relation with tuples that contains only the specified attributes."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" Can rearrange attributes’ ordering."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" Can manipulate the values.")],1),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msub",[s("mi",[t._v("π")]),s("mrow",[s("msub",[s("mi",[t._v("A")]),s("mn",[t._v("1")])],1),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mo",[t._v("⋯")]),s("mtext"),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("msub",[s("mi",[t._v("A")]),s("mi",[t._v("n")])],1)],1)],1),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\pi_{A_1,\\cdots,A_n}(R)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1.036108em","vertical-align":"-0.286108em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03588em"}},[t._v("π")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t vlist-t2"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.328331em"}},[s("span",{staticStyle:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mathdefault mtight"},[t._v("A")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t vlist-t2"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.31731428571428577em"}},[s("span",{staticStyle:{top:"-2.357em","margin-left":"0em","margin-right":"0.07142857142857144em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.5em"}}),s("span",{staticClass:"sizing reset-size3 size1 mtight"},[s("span",{staticClass:"mord mtight"},[t._v("1")])])])]),s("span",{staticClass:"vlist-s"},[t._v("​")])]),s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.143em"}},[s("span")])])])])]),s("span",{staticClass:"mpunct mtight"},[t._v(",")]),s("span",{staticClass:"minner mtight"},[t._v("⋯")]),s("span",{staticClass:"mspace mtight",staticStyle:{"margin-right":"0.19516666666666668em"}}),s("span",{staticClass:"mpunct mtight"},[t._v(",")]),s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mathdefault mtight"},[t._v("A")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t vlist-t2"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.16454285714285719em"}},[s("span",{staticStyle:{top:"-2.357em","margin-left":"0em","margin-right":"0.07142857142857144em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.5em"}}),s("span",{staticClass:"sizing reset-size3 size1 mtight"},[s("span",{staticClass:"mord mathdefault mtight"},[t._v("n")])])])]),s("span",{staticClass:"vlist-s"},[t._v("​")])]),s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.143em"}},[s("span")])])])])])])])])]),s("span",{staticClass:"vlist-s"},[t._v("​")])]),s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.286108em"}},[s("span")])])])])]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),s("br"),t._v("\nExample: "),s("code",[t._v("SELECT b_id-100, a_id FROM R WHERE a_id='a2';")])],1),t._v(" "),s("h3",{attrs:{id:"union"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#union"}},[t._v("#")]),t._v(" Union")]),t._v(" "),s("p",[t._v("Generate a relation that contains all tuples that appear in either only one or both input relations.")]),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",[t._v("∪")]),s("mi",[t._v("S")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(R \\cup S)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("∪")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),s("br"),t._v("\nExample: "),s("code",[t._v("(SELECT * FROM R) UNION ALL (SELECT * FROM S);")])],1),t._v(" "),s("h3",{attrs:{id:"intersection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intersection"}},[t._v("#")]),t._v(" Intersection")]),t._v(" "),s("p",[t._v("Generate a relation that contains only the tuples that appear in both of the input relations.")]),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",[t._v("∩")]),s("mi",[t._v("S")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(R \\cap S)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("∩")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),s("br"),t._v("\nExample: "),s("code",[t._v("(SELECT * FROM R) INTERSECT (SELECT * FROM S);")])],1),t._v(" "),s("h3",{attrs:{id:"difference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#difference"}},[t._v("#")]),t._v(" Difference")]),t._v(" "),s("p",[t._v("Generate a relation that contains only the tuples that appear in the first and not the second of the input relations.")]),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",[t._v("−")]),s("mi",[t._v("S")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(R - S)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("\nExample: "),s("code",[t._v("(SELECT _ FROM R) EXCEPT (SELECT _ FROM S);")])],1),t._v(" "),s("h3",{attrs:{id:"product"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#product"}},[t._v("#")]),t._v(" Product")]),t._v(" "),s("p",[t._v("Generate a relation that contains all possible combinations of tuples from the input relations.")]),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",[t._v("×")]),s("mi",[t._v("S")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(R \\times S)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("×")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("\nExample: "),s("code",[t._v("SELECT * FROM R CROSS JOIN S;")]),t._v(" or "),s("code",[t._v("SELECT * FROM R, S;")])],1),t._v(" "),s("h3",{attrs:{id:"natural-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#natural-join"}},[t._v("#")]),t._v(" Natural Join")]),t._v(" "),s("p",[t._v("Generate a relation that contains all tuples that are a combination of two tuples (one from each input relation) with a common value(s) for one or more attributes.")]),t._v(" "),s("p",[t._v("Syntax: "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("R")]),s("mo",[t._v("⋈")]),s("mi",[t._v("S")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(R \\bowtie S)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[t._v("⋈")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.05764em"}},[t._v("S")]),s("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v("\nExample: "),s("code",[t._v("SELECT * FROM R NATURAL JOIN S;")])],1),t._v(" "),s("p",[s("a",{attrs:{href:"https://stackoverflow.com/a/3228910/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("difference between CROSS JOIN and FULL OUTER JOIN?"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"advanced-sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-sql"}},[t._v("#")]),t._v(" Advanced SQL")]),t._v(" "),s("h3",{attrs:{id:"relational-languages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relational-languages"}},[t._v("#")]),t._v(" Relational Languages")]),t._v(" "),s("p",[t._v("User only needs to specify the answer that they want, not how to compute it.")]),t._v(" "),s("p",[t._v("The DBMS is responsible for efficient evaluation of the query."),s("br"),t._v(" "),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[t._v("→")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\rightarrow")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.36687em","vertical-align":"0em"}}),s("span",{staticClass:"mrel"},[t._v("→")])])])])]),t._v(" Query optimizer: re-orders operations and generates query plan")],1),t._v(" "),s("p",[t._v("SQL is based on "),s("strong",[t._v("bags")]),t._v(" (duplicates) nots sets (not duplicates).")]),t._v(" "),s("p",[t._v("SQL Join: https://en.wikipedia.org/wiki/Join_(SQL)")]),t._v(" "),s("p",[s("code",[t._v("Row_Number")]),t._v(": the position of tuple within the window defined by the APRTITION BY clause")]),t._v(" "),s("p",[s("code",[t._v("Rank")]),t._v(": position in the sorting order")])])}),[],!1,null,null,null);a.default=i.exports}}]);