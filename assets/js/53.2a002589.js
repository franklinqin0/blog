(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{540:function(t,a,e){"use strict";e.r(a);var r=e(1),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("While studying for interview problems, I use "),e("code",[t._v("Python3")]),t._v(" as the PL and feel like concluding its commonly used features.")]),t._v(" "),e("ul",[e("li",[t._v("elegant and clear")]),t._v(" "),e("li",[t._v("high-readability")])]),t._v(" "),e("h2",{attrs:{id:"int"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" Int")]),t._v(" "),e("p",[t._v("The # bits of number "),e("code",[t._v("n")]),t._v(" is "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[e("svg",{staticStyle:{"vertical-align":"-0.466ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"4.626ex",height:"2.036ex",viewBox:"0 -694 2044.7 900"}},[e("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[e("g",{attrs:{"data-mml-node":"math"}},[e("g",{attrs:{"data-mml-node":"mi"}},[e("path",{attrs:{"data-c":"6C",d:"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"}}),e("path",{attrs:{"data-c":"6F",d:"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z",transform:"translate(278, 0)"}}),e("path",{attrs:{"data-c":"67",d:"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z",transform:"translate(778, 0)"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(1278, 0)"}},[e("path",{attrs:{"data-c":"2061",d:""}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(1444.7, 0)"}},[e("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})])])])])]),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"modular-arithmatic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modular-arithmatic"}},[t._v("#")]),t._v(" Modular Arithmatic")]),t._v(" "),e("p",[e("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[e("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"22.468ex",height:"2.497ex",viewBox:"0 -853.7 9930.7 1103.7"}},[e("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[e("g",{attrs:{"data-mml-node":"math"}},[e("g",{attrs:{"data-mml-node":"mo"}},[e("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(389, 0)"}},[e("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(1211.2, 0)"}},[e("path",{attrs:{"data-c":"2B",d:"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(2211.4, 0)"}},[e("path",{attrs:{"data-c":"6D",d:"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),e("g",{attrs:{"data-mml-node":"msup",transform:"translate(3089.4, 0)"}},[e("g",{attrs:{"data-mml-node":"mo"}},[e("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(389, 363) scale(0.707)"}},[e("path",{attrs:{"data-c":"6B",d:"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"}})])]),e("g",{attrs:{"data-mml-node":"mspace",transform:"translate(3896.8, 0)"}}),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(4730.2, 0)"}},[e("path",{attrs:{"data-c":"6D",d:"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"}}),e("path",{attrs:{"data-c":"6F",d:"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z",transform:"translate(833, 0)"}}),e("path",{attrs:{"data-c":"64",d:"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z",transform:"translate(1333, 0)"}})]),e("g",{attrs:{"data-mml-node":"mstyle",transform:"translate(6785.8, 0)"}},[e("g",{attrs:{"data-mml-node":"mspace"}})]),e("g",{attrs:{"data-mml-node":"mstyle",transform:"translate(6952.5, 0)"}},[e("g",{attrs:{"data-mml-node":"mspace"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(7119.2, 0)"}},[e("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(7997, 0)"}},[e("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(9052.7, 0)"}},[e("path",{attrs:{"data-c":"6D",d:"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})])])])])])],1),t._v(" "),e("h3",{attrs:{id:"bit-manipulation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bit-manipulation"}},[t._v("#")]),t._v(" Bit Manipulation")]),t._v(" "),e("p",[e("code",[t._v("n & (n-1)")]),t._v(" would eliminate the rightmost 1-bit.")]),t._v(" "),e("h3",{attrs:{id:"overflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overflow"}},[t._v("#")]),t._v(" Overflow")]),t._v(" "),e("p",[t._v("Basically, Python doesn't need to worry about integer overflow.")]),t._v(" "),e("p",[t._v("Following are from "),e("a",{attrs:{href:"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949",target:"_blank",rel:"noopener noreferrer"}},[e("em",[t._v("EPI in Python")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Integers:")]),t._v(" "),e("blockquote",[e("p",[t._v("Integers in Python3 are "),e("strong",[t._v("unbounded")]),t._v("-the "),e("em",[t._v("maximum integer")]),t._v(" representable is "),e("em",[t._v("a function of the available memory")]),t._v(". The constant "),e("code",[t._v("sys.maxsize")]),t._v(" can be used to find the word-size; specifically, it's the maximum value integer that can be stored in the word, e.g., "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[e("svg",{staticStyle:{"vertical-align":"-0.186ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"12.226ex",height:"1.731ex",viewBox:"0 -683 5403.9 765"}},[e("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[e("g",{attrs:{"data-mml-node":"math"}},[e("g",{attrs:{"data-mml-node":"mn"}},[e("path",{attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(722.2, 0)"}},[e("path",{attrs:{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(1722.4, 0)"}},[e("path",{attrs:{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"}})]),e("g",{attrs:{"data-mml-node":"mn",transform:"translate(2500.4, 0)"}},[e("path",{attrs:{"data-c":"36",d:"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"}}),e("path",{attrs:{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z",transform:"translate(500, 0)"}})]),e("g",{attrs:{"data-mml-node":"mo",transform:"translate(3722.7, 0)"}},[e("path",{attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),e("g",{attrs:{"data-mml-node":"mi",transform:"translate(4722.9, 0)"}},[e("path",{attrs:{"data-c":"4C",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"}})])])])])]),t._v(" on a "),e("code",[t._v("64")]),t._v("-bit machine. Bounds on floats are specified in "),e("code",[t._v("sys.float-info")]),t._v(".")],1)]),t._v(" "),e("p",[t._v("Float:")]),t._v(" "),e("blockquote",[e("p",[t._v("Unlike integers, floats are not infinite precision, and it's convenient to refer to infinity as "),e("code",[t._v("float('inf ')")]),t._v(" and "),e("code",[t._v("float('-inf ')")]),t._v(". These values are comparable to integers, and can be used to create pseudo max-int and pseudo min-int.")])]),t._v(" "),e("h3",{attrs:{id:"bin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bin"}},[t._v("#")]),t._v(" bin")]),t._v(" "),e("p",[t._v("From "),e("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/library/functions.html#bin")]),t._v(":")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("bin")]),t._v(" "),e("p",[e("code",[t._v("bin")]),t._v(" converts an integer number to a binary string prefixed with “0b”. "),e("code",[t._v("[2:]")]),t._v(" takes away "),e("code",[t._v("0b")]),t._v(" and returns the binary int as a string.")])]),t._v(" "),e("p",[t._v("If "),e("code",[t._v("n")]),t._v(" is an integer, "),e("code",[t._v("int(bin(n)[2:],2)")]),t._v(" would return the original "),e("code",[t._v("n")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"division"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#division"}},[t._v("#")]),t._v(" Division")]),t._v(" "),e("p",[e("code",[t._v("divmod")])]),t._v(" "),e("h3",{attrs:{id:"division-operators-and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#division-operators-and"}},[t._v("#")]),t._v(" Division Operators "),e("code",[t._v("/")]),t._v(" and "),e("code",[t._v("//")])]),t._v(" "),e("p",[t._v("The division operators difference in Python 2 and 3 is described "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/division-operator-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Python 2 uses "),e("code",[t._v("/")]),t._v(" for "),e("strong",[t._v("floor division")]),t._v(" if "),e("em",[t._v("both arguments")]),t._v("(the dividend and divisor) are "),e("em",[t._v("integers")]),t._v(".")]),t._v(" "),e("p",[t._v("Python 2 uses "),e("code",[t._v("//")]),t._v(" for "),e("strong",[t._v("floor division")]),t._v(" for "),e("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),e("p",[t._v("Python 3 uses "),e("code",[t._v("/")]),t._v(" for "),e("strong",[t._v("floating point division")]),t._v(" for "),e("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),e("p",[t._v("Python 3 uses "),e("code",[t._v("//")]),t._v(" for "),e("strong",[t._v("floor division")]),t._v(" for "),e("em",[t._v("both int and float arguments")]),t._v(".")]),t._v(" "),e("p",[t._v("So the behavior of “//” is same for Python 2 and 3.")]),t._v(" "),e("p",[t._v("Personally I like Python 3 for division behavior as it's clearer and causes less confusion.")]),t._v(" "),e("h2",{attrs:{id:"data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}},[t._v("#")]),t._v(" Data Structures")]),t._v(" "),e("p",[t._v("Sometimes it's not so obvious to see how to use a data structure in "),e("code",[t._v("Python3")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"string-immutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-immutable"}},[t._v("#")]),t._v(" String (Immutable)")]),t._v(" "),e("p",[t._v("'' or \"\"")]),t._v(" "),e("h4",{attrs:{id:"f-string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#f-string"}},[t._v("#")]),t._v(" f-string")]),t._v(" "),e("p",[t._v("From "),e("a",{attrs:{href:""}},[t._v("https://docs.python.org/3/reference/lexical_analysis.html#f-strings")]),t._v(":")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("f-strings")]),t._v(" "),e("p",[t._v("For example: "),e("code",[t._v("f'{6:08b}'")]),t._v(".")]),t._v(" "),e("p",[t._v("Starting with "),e("code",[t._v("f")]),t._v(", represent int "),e("code",[t._v("6")]),t._v(" in "),e("code",[t._v("8")]),t._v(" "),e("code",[t._v("b")]),t._v("inary digits with "),e("code",[t._v("0")]),t._v("'s padded at front. So the evaluated result is: "),e("code",[t._v("'00000110'")]),t._v(".")]),t._v(" "),e("p",[t._v("Equivalently, could do "),e("code",[t._v("bin(6)[2:].zfill(8)")]),t._v(", where "),e("code",[t._v("zfill")]),t._v(" added the "),e("code",[t._v("0")]),t._v("'s padded at front.")])]),t._v(" "),e("h3",{attrs:{id:"hashset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),e("p",[t._v("set()")]),t._v(" "),e("h3",{attrs:{id:"hashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),e("p",[t._v("{}\n"),e("code",[t._v("get(self, key, default=None)")]),t._v(" returns the value for key if key is in the dictionary, else default.")]),t._v(" "),e("p",[t._v("Dictionary associates values with immutable keys which means you cannot use lists as keys.")]),t._v(" "),e("h3",{attrs:{id:"array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),e("p",[t._v("[]")]),t._v(" "),e("h3",{attrs:{id:"matrix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#matrix"}},[t._v("#")]),t._v(" Matrix")]),t._v(" "),e("p",[e("code",[t._v("[0]*2")]),t._v(" "),e("code",[t._v("[[0 for _ in range(num_cols)] for i in range(num_rows)]")]),t._v(" "),e("code",[t._v("[[0]*num_cols for _ in range(num_rows)]")])]),t._v(" "),e("h3",{attrs:{id:"stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),e("p",[t._v("[]\n"),e("code",[t._v("from collections import deque")]),t._v(" and initialize a stack as "),e("code",[t._v("deque()")])]),t._v(" "),e("h3",{attrs:{id:"queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),e("p",[t._v("More at "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/queue-in-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Queue in Python"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"linked-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[t._v("#")]),t._v(" Linked List")]),t._v(" "),e("p",[t._v("[]")]),t._v(" "),e("h3",{attrs:{id:"tuple-immutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tuple-immutable"}},[t._v("#")]),t._v(" Tuple (Immutable)")]),t._v(" "),e("p",[t._v("()")]),t._v(" "),e("h3",{attrs:{id:"list-cannot-be-hashed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-cannot-be-hashed"}},[t._v("#")]),t._v(" List Cannot be Hashed")]),t._v(" "),e("p",[t._v('A list adding to a set would cause error "list objects are unhashable" b/c '),e("strong",[t._v("list is mutable")]),t._v(" but elements in set are not supposed to change after being added and hashed. Instead of "),e("code",[t._v("list")]),t._v(", I could add a "),e("code",[t._v("tuple")]),t._v(" to the set, as described in "),e("a",{attrs:{href:"https://stackoverflow.com/a/1306653/6421652",target:"_blank",rel:"noopener noreferrer"}},[t._v("this Stack Overflow answer"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"algorithms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#algorithms"}},[t._v("#")]),t._v(" Algorithms")]),t._v(" "),e("p",[t._v("Prefix Sum can look for subarray sum O(1) every time\n前缀和：多次查询区间和O(1)/次")]),t._v(" "),e("ul",[e("li",[t._v("前缀和是⼀种思想，可以⽤于许多的减少时间复杂度的地⽅")]),t._v(" "),e("li",[t._v("我们不⼀定会使⽤前缀“和”，可能是其他⽐如积，最⼤值，最⼩值这样 的值。主要还是要根据题⽬来考虑使⽤什么。")]),t._v(" "),e("li",[t._v("哈希表是⼀种⼯具，与前缀和配套使⽤可以达到“⽤空间换时间”的⽬ 的。")])]),t._v(" "),e("p",[t._v("双指针：根据区间和调整区间\n树状数组：单点修改，区间查询\n线状树：区间修改")]),t._v(" "),e("p",[t._v("Two Pointers is used interchangbly w/ sliding window, as the way of thinking is more important than name and style.")]),t._v(" "),e("p",[t._v("95% of the time, summing over a window requires prefix sum. Exceptions: 线状树, 互动数组")]),t._v(" "),e("p",[t._v("Edge cases to watch for:")]),t._v(" "),e("ol",[e("li",[t._v("0, empty input of string/array/any ds")]),t._v(" "),e("li",[t._v("TLE / infinite loop")])]),t._v(" "),e("p",[e("code",[t._v("csum")]),t._v(" means cumulative sum.")]),t._v(" "),e("p",[t._v("隐式图：没有明确的点和边的关系（不会定义Node等）")]),t._v(" "),e("p",[t._v("矩阵就是⼀种经典的隐式图问题")])])}),[],!1,null,null,null);a.default=s.exports}}]);